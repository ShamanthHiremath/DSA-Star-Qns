RULES FOR APPLYING DP

1)When multiple possible ways/ counting the number of ways possible to do a problem is asked
2)Which is the MAX of all or MIN of all ways
3)Try all possible cases RECURSIONS
4)Perform all ways and sum it

1)Try to represnt the prob in INDEXES
2)Device the Algorithm to find the possible way for that output
3)Sum of all possible ways (if MIN or MAX is asked, take MIN or MAX and add)
4)Memosize/store in a VECTOR or MAP (of size(n+1) initialised with -1) accordingly 
5)Find the no of ways stored  in that index whenever required to eliminate time
6)Used in cases where there are overlapping sub problems

DP: MEMOIZATION (Top-Down Approach)

1. Form recursive relation/function
2. Define a DP vector (initialised with -1/optimal value) with the size of the quantity (that varies) to be found out
3. Pass it by reference to the function and below base case, for every dp[quantity] != -1 return dp[quantity];
4. For every last return call store the answer as return dp[quantity] = ans;

DP: TABULATION (Bottom-Up Approach)

1. Refer DPMemo
2. Initialise DP Vector with suuitable value, INSIDE THE FUNCTION
3. Infer base case and store that value in the corresponding DP[]
4. Run necessary for-loop (In reverse order of DPMemo/ Bottom Approach) and insert the DP logic
5. Replace recursive calls with DP[] of that very quantity in DP Memo RECURSION

REFER Maximum Length of a Square that can be formed in a 2-D array

STRIVERS LINK FOR DP AND RECURSIONS
https://youtu.be/mLfjzJsN8us?si=FvJZu8DEX0VZDpkA
IMPLEMENT DP
https://youtu.be/EgG3jsGoPvQ?si=XSwC79z7-EO08c1h

EXAMPLES
CLIMBING STAIRS
HOUSE ROBBER